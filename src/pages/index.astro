---
const title = "Size My Generator | Home Generator Sizing Calculator";
const desc =
  "Quickly find out what size generator you need to power essentials, most of your house, or your whole home (informational only).";
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={desc} />
    <link rel="canonical" href="https://sizemygenerator.com/" />

    <!-- Icons -->
    <link rel="icon" href="/favicon-32.png" sizes="32x32" />
    <link rel="icon" href="/favicon-16.png" sizes="16x16" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />

    <style>
      :root { --card:#fff; --bg:#f6f8fb; --text:#222; --muted:#667; --brand:#0b6; }
      * { box-sizing: border-box; }
      body { font-family: system-ui, -apple-system, Helvetica, Arial, sans-serif; margin:0; background:var(--bg); color:var(--text); }
      header { padding: 2rem 1rem 0; max-width: 900px; margin: 0 auto; }
      h1 { margin: 0 0 .5rem; font-size: clamp(1.6rem, 2.8vw, 2.2rem); }
      p.lead { margin: 0 0 1.5rem; color: var(--muted); }

      .box {
        background: var(--card);
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 3px 14px rgba(0,0,0,.06);
        max-width: 720px;
        margin: 0 auto 1.5rem;
      }
      label { display:block; margin-top: 1rem; font-weight: 600; }
      input, select {
        width: 100%; padding: .6rem .7rem; margin-top: .35rem;
        border: 1px solid #cfd6df; border-radius: 8px; font-size: 1rem; background:#fff;
      }
      .result {
        margin-top: 1.25rem; padding: 1rem;
        background:#f0f9ff; border:1px solid #b3e0ff; border-radius:10px; font-weight:600;
      }
      footer { text-align:center; padding: 1.5rem 1rem 3rem; color: var(--muted); }
      footer a { color: var(--brand); text-decoration: none; }
      footer a:hover { text-decoration: underline; }

      /* Compact, mobile-first control row for surge + load policy */
      .controls-row {
        display:grid;
        grid-template-columns: 1fr 1fr;
        gap:.5rem .75rem;
        margin-top:1rem;
        align-items:center;
      }
      .controls-row .lbl { font-weight:600; margin:0; }
      .controls-row .fld { width:100%; min-width:0; }
      @media (max-width:560px){
        .controls-row { grid-template-columns: 1fr; }
      }
    </style>
  </head>
  <body>
    <header>
      <h1>Size My Generator</h1>
      <p class="lead">Enter a few details. We’ll estimate running &amp; startup load and round up to a safe recommendation.</p>
    </header>

    <div class="box" id="gen-calculator">
      <label for="scope"><strong>What do you want to power?</strong></label>
      <select id="scope">
        <option value="essentials">Essentials (fridge, lights, Wi-Fi, furnace blower)</option>
        <option value="most">Most of house (kitchen + some HVAC)</option>
        <option value="whole">Whole house (unrestricted typical use)</option>
      </select>

      <!-- Collapsible appliance section -->
      <div id="appliance-header" style="display:flex;justify-content:space-between;align-items:center;margin-top:0.75rem;">
        <div id="appliance-summary" style="font-size:.95rem;color:#555">
          ✅ Preset applied. <span id="summary-count">0</span> items selected.
          <button id="toggle-appliances" type="button" style="margin-left:.5rem;border:0;background:transparent;color:#0b6;font-weight:600;cursor:pointer;">Show details ▾</button>
        </div>
      </div>
      <div id="appliance-panel" style="overflow:hidden;max-height:0;transition:max-height .28s ease;will-change:max-height;margin-top:.25rem;">
        <p style="margin:.25rem 0 .5rem;color:#666">Toggle what you’ll run at the same time:</p>
        <div id="appliance-list" style="display:grid;grid-template-columns:1fr 1fr;gap:.5rem 1rem"></div>
      </div>

      <hr style="margin:1rem 0">

      <!-- AC module -->
      <div id="ac-section">
        <div style="display:flex;justify-content:space-between;align-items:center;gap:.5rem">
          <strong>Air conditioning (optional)</strong>
          <button id="add-ac" type="button">+ Add AC system</button>
        </div>
        <small style="color:#555">Add one row per condenser (e.g., 3-ton up, 2-ton down).</small>
        <div id="ac-rows" style="display:flex;flex-direction:column;gap:.5rem;margin-top:.5rem"></div>
      </div>

      <!-- Surge + Load usage (dropdown) -->
      <div class="controls-row">
        <label for="surgeWatts" class="lbl">Custom temporary surge (W)</label>
        <input id="surgeWatts" type="number" min="0" step="100" value="0" class="fld">

        <label for="loadPolicy" class="lbl">Load usage</label>
        <select id="loadPolicy" class="fld">
          <option value="conservative">Assume everything could run</option>
          <option value="managed">I’ll manage loads (stagger use)</option>
        </select>
      </div>

      <hr>
      <div id="results">
        <p><strong>Running load:</strong> <span id="runW">0</span> W</p>
        <p><strong>Starting surge considered:</strong> <span id="startW">0</span> W</p>
        <p style="margin:.75rem 0 0 0"><strong>Recommended generator size:</strong> <span id="rec">—</span></p>
        <small id="assumption-note" style="color:#666">Assumes all selected items could run at once.</small>
      </div>

      <p style="margin-top:1rem;color:#555">
        Heads up: This calculator is for general information only. Always consult a licensed electrician before buying or installing a generator.
      </p>
    </div>

    <script>
(() => {
  // ---------- APPLIANCES (non-AC) ----------
  const APPLIANCES = [
    { id:'fridge',         name:'Refrigerator',                 run:150,  start:1200, defaultScopes:['essentials','most','whole'] },
    { id:'lights',         name:'LED lights (whole house)',     run:200,  start:0,    defaultScopes:['essentials','most','whole'] },
    { id:'wifi',           name:'Wi-Fi/router',                 run:15,   start:0,    defaultScopes:['essentials','most','whole'] },
    { id:'furnace',        name:'Furnace blower (gas/propane)', run:600,  start:1200, defaultScopes:['essentials','most','whole'] },
    { id:'sump',           name:'Sump pump (1/2 hp)',           run:800,  start:2000, defaultScopes:['essentials','most','whole'] },
    { id:'well',           name:'Well pump (3/4 hp)',           run:1000, start:3000, defaultScopes:['most','whole'] },
    { id:'microwave',      name:'Microwave (1.2 kW)',           run:1200, start:1200, defaultScopes:['most','whole'] },
    { id:'toaster',        name:'Toaster (2-slice)',            run:1200, start:1200, defaultScopes:['most','whole'] },
    { id:'hair',           name:'Hair dryer',                   run:1500, start:1500, defaultScopes:['most','whole'] },
    { id:'spaceHeat',      name:'Space heater (1500 W)',        run:1500, start:1500, defaultScopes:['most','whole'] },
    { id:'elecRange',      name:'Electric range (1 burner)',    run:1800, start:1800, defaultScopes:['whole'] },
    { id:'dishwasher',     name:'Dishwasher (heat dry)',        run:1200, start:1200, defaultScopes:['most','whole'] },
    { id:'elecDryer',      name:'Electric clothes dryer',       run:2500, start:5000, defaultScopes:['whole'] },
    { id:'waterHeater',    name:'Electric water heater (tank)', run:4500, start:4500, defaultScopes:['whole'] },
    { id:'freezer',        name:'Chest freezer',                run:100,  start:600,  defaultScopes:['most','whole'] },
    { id:'tv',             name:'TV + streaming box',           run:150,  start:0,    defaultScopes:['most','whole'] },
  ];

  // ---------- AC sizing ----------
  const RUN_W_PER_TON = { standard: 1100, inverter: 750 };
  const START_MULT    = { standard: 4.0,  inverter: 1.5 };
  const SOFT_START_FACTOR = 0.6; // soft-starter on standard ≈ 40% less surge

  // ---------- Generator tiers (continuous ratings) ----------
  const TIERS = [
    { size:2000,  label:'~2 kW portable (120 V only, light loads)' },
    { size:3500,  label:'~3.5 kW portable (basic essentials)' },
    { size:5000,  label:'~5 kW portable (essentials + kitchen basics)' },
    { size:7500,  label:'~7.5 kW portable (most of a small home)' },
    { size:10000, label:'~10 kW standby/large portable (some A/C)' },
    { size:13000, label:'~13 kW standby (A/C + kitchen, managed)' },
    { size:20000, label:'~20 kW standby (near-normal whole-home)' },
  ];

  // ---------- Elements ----------
  const el = (id) => document.getElementById(id);
  const scopeEl   = el('scope');
  const listEl    = el('appliance-list');
  const runWEl    = el('runW');
  const startWEl  = el('startW');
  const recEl     = el('rec');
  const surgeWatts= el('surgeWatts');
  const loadPolicy= el('loadPolicy'); // 'conservative' | 'managed'

  const assumptionNote = el('assumption-note');
  const acRowsEl   = el('ac-rows');
  const addAcBtn   = el('add-ac');

  const panel      = el('appliance-panel');
  const toggleBtn  = el('toggle-appliances');
  const summaryCount = el('summary-count');

  // Build appliance checkboxes
  APPLIANCES.forEach(a => {
    const wrap = document.createElement('label');
    wrap.style.display = 'flex';
    wrap.style.alignItems = 'center';
    wrap.style.gap = '.5rem';

    const cb = document.createElement('input');
    cb.type = 'checkbox';
    cb.id = 'cb_' + a.id;
    cb.dataset.run = a.run;
    cb.dataset.start = a.start;

    const txt = document.createElement('span');
    txt.textContent = `${a.name} — ${a.run}W run${a.start ? ` / ${a.start}W start` : ''}`;

    wrap.appendChild(cb);
    wrap.appendChild(txt);
    listEl.appendChild(wrap);
  });

  // Responsive grid for appliance list
  const media = window.matchMedia('(max-width: 520px)');
  function applyGrid() {
    listEl.style.gridTemplateColumns = media.matches ? '1fr' : '1fr 1fr';
  }
  applyGrid();
  media.addEventListener?.('change', applyGrid);

  // Collapsible panel
  let open = false;
  function setPanel(openNow) {
    open = openNow;
    if (open) {
      panel.style.maxHeight = panel.scrollHeight + 'px';
      toggleBtn.textContent = 'Hide details ▴';
    } else {
      panel.style.maxHeight = '0';
      toggleBtn.textContent = 'Show details ▾';
    }
  }
  toggleBtn.addEventListener('click', () => setPanel(!open));

  // AC rows (0–3)
  function addAcRow(preset = { tons: 2.5, type: 'standard', soft: false }) {
    if (acRowsEl.children.length >= 3) return;

    const row = document.createElement('div');
    row.className = 'ac-row';
    row.style.display = 'grid';
    row.style.gridTemplateColumns = '1fr 1fr auto';
    row.style.gap = '.5rem';
    row.style.alignItems = 'center';

    const tonSel = document.createElement('select');
    [1.5,2,2.5,3,3.5,4,5].forEach(t=>{
      const opt = document.createElement('option');
      opt.value = t; opt.textContent = `${t} ton`;
      tonSel.appendChild(opt);
    });
    tonSel.value = preset.tons;

    const typeWrap = document.createElement('div');
    typeWrap.style.display = 'flex';
    typeWrap.style.alignItems = 'center';
    typeWrap.style.gap = '.5rem';

    const typeSel = document.createElement('select');
    [{v:'standard', n:'Standard (single-stage)'},{v:'inverter', n:'High-efficiency (inverter)'}]
      .forEach(o=>{ const opt=document.createElement('option'); opt.value=o.v; opt.textContent=o.n; typeSel.appendChild(opt); });
    typeSel.value = preset.type;

    const softLbl = document.createElement('label');
    const softCb  = document.createElement('input');
    softCb.type = 'checkbox';
    softCb.checked = !!preset.soft;
    softLbl.appendChild(softCb);
    softLbl.appendChild(document.createTextNode(' Soft-starter'));

    typeWrap.appendChild(typeSel);
    typeWrap.appendChild(softLbl);

    const delBtn = document.createElement('button');
    delBtn.type = 'button';
    delBtn.textContent = '✕';
    delBtn.title = 'Remove';
    delBtn.style.minWidth = '2rem';

    row.appendChild(tonSel);
    row.appendChild(typeWrap);
    row.appendChild(delBtn);
    acRowsEl.appendChild(row);

    const recalcBound = recalc.bind(null);
    tonSel.addEventListener('change', recalcBound);
    typeSel.addEventListener('change', recalcBound);
    softCb.addEventListener('change', recalcBound);
    delBtn.addEventListener('click', ()=>{ row.remove(); recalc(); });
  }

  addAcBtn.addEventListener('click', () => { addAcRow(); setPanel(open); recalc(); });

  function getAcLoads() {
    const rows = Array.from(acRowsEl.querySelectorAll('.ac-row'));
    return rows.map(row => {
      const selects = row.querySelectorAll('select');
      const tons = parseFloat(selects[0].value);
      const type = selects[1].value;
      const soft = row.querySelector('input[type="checkbox"]').checked;

      const runPerTon = RUN_W_PER_TON[type];
      const run = Math.round(tons * runPerTon);

      let start = Math.round(run * START_MULT[type]);
      if (type === 'standard' && soft) start = Math.round(start * SOFT_START_FACTOR);
      start = Math.min(start, 10000); // cap unrealistic spikes

      return { run, start };
    });
  }

  function updateSummary() {
    const count = APPLIANCES.filter(a => el('cb_'+a.id).checked).length;
    summaryCount.textContent = count;
  }

  // Presets
  function applyPreset(scope) {
    // Clear checks
    APPLIANCES.forEach(a => el('cb_' + a.id).checked = false);

    // Defaults by scope
    APPLIANCES.filter(a => a.defaultScopes.includes(scope))
              .forEach(a => el('cb_' + a.id).checked = true);

    // Scope nudges
    if (scope === 'essentials') {
      ['spaceHeat','waterHeater','elecRange','elecDryer'].forEach(id=>{ const c = el('cb_'+id); if (c) c.checked = false; });
    }
    if (scope === 'most') {
      ['waterHeater','elecDryer','elecRange'].forEach(id=>{ const c = el('cb_'+id); if (c) c.checked = false; });
    }

    // Seed AC
    acRowsEl.innerHTML = '';
    if (scope === 'most')  addAcRow({ tons: 2.5, type: 'standard', soft: false });
    if (scope === 'whole') addAcRow({ tons: 4.0, type: 'standard', soft: false });

    updateSummary();
    setPanel(false);
    recalc();
  }

  // Core calc
  function recalc() {
    // Non-AC running
    const checked = APPLIANCES.filter(a => el('cb_'+a.id).checked);
    const runSumNonAC = checked.reduce((s,a)=> s + a.run, 0);

    // AC running
    const acLoads = getAcLoads();
    const runSumAC = acLoads.reduce((s,a)=> s + a.run, 0);

    // Diversity via dropdown
    const policy = loadPolicy ? loadPolicy.value : 'conservative';
    const adjustedRunNonAC = (policy === 'managed')
      ? Math.round(runSumNonAC * 0.8)
      : runSumNonAC;

    const runSum = adjustedRunNonAC + runSumAC;

    // Surge: largest single start + running of everything else
    const starts = [
      ...checked.map(a => a.start||0),
      ...acLoads.map(a => a.start||0)
    ];
    const largestStart = starts.length ? Math.max(...starts) : 0;

    let runWithoutLargestStarter = runSum;
    const largestFromAC = acLoads.find(a => a.start === largestStart);
    if (largestFromAC) {
      runWithoutLargestStarter -= largestFromAC.run;
    } else {
      const largestFromApp = checked.find(a => (a.start||0) === largestStart);
      if (largestFromApp) runWithoutLargestStarter -= largestFromApp.run;
    }

    // Extra surge (defaults to 0)
    const extra = parseInt((surgeWatts && surgeWatts.value) ? surgeWatts.value : '0', 10) || 0;

    let surgeNeed = Math.max(runSum, runWithoutLargestStarter + largestStart) + extra;

    // Recommend so surgeNeed ≈ 80% of rating
    const neededContinuous = Math.ceil(surgeNeed / 0.8);
    const tier = TIERS.find(t => t.size >= neededContinuous)
            || { size: Math.ceil(neededContinuous/1000)*1000, label: `~${Math.ceil(neededContinuous/1000)*1000} W (custom)` };

    runWEl.textContent = runSum.toLocaleString();
    startWEl.textContent = surgeNeed.toLocaleString();
    recEl.textContent = `${tier.label}`;

    if (assumptionNote) {
      assumptionNote.textContent = (policy === 'managed')
        ? 'Assumes you’ll manage loads (some items won’t run simultaneously).'
        : 'Assumes all selected items could run at once.';
    }

    updateSummary();

    // Keep panel height correct if open
    if (open) panel.style.maxHeight = panel.scrollHeight + 'px';
  }

  // Wire-up
  scopeEl.addEventListener('change', e => applyPreset(e.target.value));
  listEl.addEventListener('change', recalc);
  if (surgeWatts) surgeWatts.addEventListener('input', recalc);
  if (loadPolicy) loadPolicy.addEventListener('change', recalc);
  addAcBtn.addEventListener('click', () => { addAcRow(); setPanel(open); recalc(); });

  // Initial
  applyPreset(scopeEl.value);
})();
    </script>

    <footer>
      <div style="text-align:center;padding:1.5rem 1rem 3rem;color:#667;">
        <a href="/disclaimer" style="color:#0b6;text-decoration:none;">Disclaimer</a> ·
        <a href="/terms" style="color:#0b6;text-decoration:none;">Terms</a> ·
        <a href="/privacy" style="color:#0b6;text-decoration:none;">Privacy</a>
      </div>
    </footer>

  </body>
</html>
